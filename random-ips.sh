#!/bin/bash
## random-ips
## version 0.0.1 - initial
##################################################
random-256() {
  echo $(( RANDOM % 256 ))
}
random-ips-help() { { local -i n ; n=${1} ; }
  {
    cat << EOF
random-ips
- generates random ip addresses
OPTIONS
	n - number of ip addresses
	method - method used to list (optional)
	concurrency - allowed number of parralel commands (optional)
EXAMPLES
	random-ips 1000
239.35.4.15
202.241.49.8
	random-ips 1000 2
239.35.4.15
202.241.49.8
	random-ips 4000 4 2000
239.35.4.15
202.241.49.8
EOF
  } 1>&2
}
random-ip() {
  echo $( random-256 ).$( random-256 ).$( random-256 ).$( random-256 )
}
random-ip-list-1() { # for loop
  local i
  for i in $( seq ${n} )
  do
    echo $( random-256 ).$( random-256 ).$( random-256 ).$( random-256 )
  done
}
random-ip-list-2() { # xargs serial
yes | head -n ${n} | xargs -i bash -c "{ $( declare -f random-256 ) ; $( declare -f random-ip ) ; random-ip ; }"
}
random-ip-list-3() { # xargs parallel
  yes | head -n ${n} | xargs -P ${concurrency} -i bash -c "{ $( declare -f random-256 ) ; $( declare -f random-ip ) ; random-ip ; }"
}
random-ip-list-4() { # xargs parallel without injection
  (
    declare -xf random-256
    declare -xf random-ip
    yes | head -n ${n} | xargs -P ${concurrency} -i bash -c "random-ip"
  )
}
random-ip-list() {
  ${FUNCNAME}-${method}
}
random-ips() { { local -i n ; n=${1} ; local -i method ; method="${2-1}" ; local -i concurrency ; concurrency=${3-1000} ; }
  test ${n} -gt 0 || { ${FUNCNAME}-help ; false ; return ; }
  test ${method} -gt 0 || { ${FUNCNAME}-help ; false ; return ; }
  test ${concurrency} -gt 0 || { ${FUNCNAME}-help ; false ; return ; }
  random-ip-list
}
##################################################
if [ ! ] 
then
 true
else
 exit 1 # wrong args
fi
##################################################
random-ips ${@}
##################################################
## generated by create-stub2.sh v0.1.2
## on Tue, 11 Jun 2019 13:23:16 +0900
## see <https://github.com/temptemp3/sh2>
##################################################
